[{"content":"The myBuddy app focuses on pet health in two versions for doctors and for pet owners. This app was commissioned by a startup in Woodland Hills, California, and I developed it with the development team.\nThis application is for pet owners and the vet application is introduced in a separate post.\n Architecture: MVP, MVVM, No Architecture Programming language: Kotlin, Java Operating system: Android Year of production: 2021  More  ","date":"2022-02-25T00:00:00Z","image":"/img/mybuddy_pet_owner_screenshot.png","permalink":"/projects/mybuddy-pet-owner/","title":"MyBuddy app (pet owner version)"},{"content":"The myBuddy app focuses on pet health in two versions for vet and for pet owners. This app was commissioned by a startup in Woodland Hills, California, and I developed it with the development team.\nThis application is for vet and the pet owners application is introduced in a separate post.\n Architecture: MVP, MVVM, No Architecture Programming language: Kotlin, Java Operating system: Android Year of production: 2021  More  ","date":"2022-02-25T00:00:00Z","image":"/img/mybuddy_vet_screenshot.png","permalink":"/projects/mybuddy-vet/","title":"MyBuddy app (vet version)"},{"content":"I have developed this application together with the development team and we are further developing this application.\n Architecture: MVVM Programming language: Kotlin, Java Operating system: Android Year of production: 2022  More  ","date":"2022-02-23T00:00:00Z","image":"/img/nahad_app_screenshot.png","permalink":"/projects/nahad_app/","title":"Nahad in-house application"},{"content":"I have developed this application together with the development team and we are further developing this application.\n Architecture: MVVM Programming language: Kotlin, Java Operating system: Android Year of production: 2022  More  ","date":"2022-02-23T00:00:00Z","image":"/img/nahad_chat_screenshot.png","permalink":"/projects/nahad_chat/","title":"Nahad messenger"},{"content":"It is under the control panel, this game was made to customer order and is still being developed and changed.\n Architecture: MVVM Programming language: Kotlin, Java Operating system: Android Year of production: 2019  More  ","date":"2022-02-22T00:00:00Z","image":"/img/barandeh_sho_screenshot.png","permalink":"/projects/barandehsho/","title":"Barandehsho Game"},{"content":" Architecture: MVVM Programming language: Kotlin, Java Operating system: Android Year of production: 2019  More  ","date":"2022-02-22T00:00:00Z","image":"/img/behzi_screenshot.png","permalink":"/projects/behzi/","title":"Behzi application"},{"content":"This game has up to 100,000 users and more than 10,000 comments, but the number of users has been decreasing over the years\n Architecture: First Android Arch Programming language: Java Operating system: Android Year of production: 2016  More  ","date":"2022-02-22T00:00:00Z","image":"/img/challenge_screenshot.png","permalink":"/projects/challenge/","title":"Challenge Game"},{"content":"This application also takes the idea from the company friendsurance Australia and uses it as a subset in exchange for discounts on insurance services and premiums. This idea and application is ranked 7th in the programming competitions Sharif University . \n Architecture: MVVM Programming language: Kotlin, Java Operating system: Android Year of production: 2020   More  ","date":"2022-02-22T00:00:00Z","image":"/img/bimeh_screenshot.png","permalink":"/projects/insurance/","title":"Insurance application"},{"content":"In this application, temporary accommodations such as (apartments, suites, villas, gardens, houses) are rented by hosts and rented by travelers.\n Architecture: MVP Programming language: Java, Kotlin Operating system: Android Year of production: 2019  More  ","date":"2022-02-22T00:00:00Z","image":"/img/mizbanyab_screenshot.png","permalink":"/projects/mizbanyab/","title":"Mizbanyab application"},{"content":"(the company in which I am the senior developer of Android), which is designed for streaming movies and series. The idea of ​​this application is similar to Netflix and Filimo.\n Architecture: Clean Architecture Programming language: Kotlin, Java Operating system: Android Year of production: 2019  More  ","date":"2022-02-22T00:00:00Z","image":"/img/moodic_screenshot.png","permalink":"/projects/moodic/","title":"Moodic application"},{"content":"Hello, in this article I want to introduce the Android database [Reactor] (https://github.com/aaaamirabbas/reactor).\nA few years ago, when I first entered the world of Android programming, I made a game called Black Intelligence at that time (a game similar to the sun), which, of course, was on the front page of Bazaar Cafe three or four times and was unfortunately removed by Bazaar Cafe (due to Using the name of Aftabeh in the title of the game :) which, of course, I later made another game that continued its path called** [Challenge] (https://cafebazaar.ir/app/com.abbasnaghdi.ihosh)**.\nI remember in those days people were downloading games and hacking scores with Lucky Patcher and other apps, and in fact there were a few variables whose values ​​could be easily fetched at runtime, and Black Intelligence was no exception. The first thing I saw was that people were trying to change their privileges, but at that time I solved this problem by encrypting the stored data, which of course had a lot of coding and problems and…\nBut today, as I become more professional, I know that for every application and every game I build, I have to follow the important principle that data that needs to be kept secure must be encrypted.\nLater, the idea of ​​building a personalized and optimized library Key-Value came to my mind to solve many problems of SharedPreferences. Of course, there are many libraries, but I wanted something different, so I did it and the rector was born.\nWhat capabilities does the rector have now?\n It is very light and compact, about 17 KB It has symmetric storage and retrieval (Symmetric) that protects your data and the key to encrypt data in each application and each device is different, which causes more protection (of course not definite but efficient, there is no certainty in the world of 0 and 1) You can store any data unlike SharedPreferences Data is stored separately based on typing, which reduces the memory soldier It has good performance, which is improving more in each version  And of course, other features that are going to be added in the second version, all of which you can see in the project GitHub repository.\nAll right now let\u0026rsquo;s do a little comparison (comparison only in use not infrastructure)\nSharedPreferences\nval sharedPref = activity? .getSharedPreferences ( getString (R.string.preference_file_key), Context.MODE_PRIVATE) Definition Reacto\nval reactor = Reactor (context) Save and retrieve multiple variables in SharedPreferences\nval editor = sharedPref.edit (); editor.putBoolean (\u0026#34;key_name\u0026#34;, true); editor.putString (\u0026#34;key_name\u0026#34;, \u0026#34;string value\u0026#34;); editor.commit (); val name = sharedPref.getString (\u0026#34;key_name\u0026#34;, null); val isName = sharedPref.getBoolean (\u0026#34;key_name\u0026#34;, null); Save multiple and recover in Reactor\nreactor.put (\u0026#34;key_name\u0026#34;, \u0026#34;your string\u0026#34;) reactor.put (\u0026#34;key_name\u0026#34;, 1000) val name = reactor.get (\u0026#34;key_name\u0026#34;, \u0026#34;\u0026#34;) val isDay = reactor.get (\u0026#34;key_name\u0026#34;, 0) Save and retrieve a class in SharedPreferences\n// ops :) Save and retrieve a class in Reactor\nreactor.put (\u0026#34;key_name\u0026#34;, YourClass ()) val yourClass = reactor.get (\u0026#34;key_name\u0026#34;, YourClass ()) Of course, the Reactor capabilities do not end with these examples, and to see a more complete document, refer to the project\u0026rsquo;s GitHub repository.\nMore  ","date":"2022-02-22T00:00:00Z","image":"/img/reactor_screenshot.png","permalink":"/projects/reactor/","title":"Reactor library"},{"content":" Architecture: MVVM Programming language: Kotlin, Java Operating system: Android Year of production: 2019  More  ","date":"2022-02-22T00:00:00Z","image":"/img/ticket_screenshot.png","permalink":"/projects/ticket/","title":"Ticket application"},{"content":"This application is designed for students, but you can use this application wherever you need an audio booklet.  Architecture: MVP Programming language: Kotlin, Java Operating system: Android Year of production: 2018  More  ","date":"2022-02-22T00:00:00Z","image":"/img/student_screenshot.png","permalink":"/projects/unit/","title":"Unit application"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"/projects/easy-youtube-dl/","title":""}]